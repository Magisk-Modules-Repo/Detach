#!/system/bin/sh
# ======================================================================
# Module: Detach
# Created by Rom@xda-developers

menu() {
# Initial stuff
magisk=$(ls /data/adb/magisk/magisk || ls /sbin/magisk) 2>/dev/null;
MAGISK_VERSION=$($magisk -c | awk '{ print $NF }' | sed -e 's/(\(.*\))/\1/')
case $MAGISK_VERSION in
'15.'[1-9]*) # Version 15.1 - 15.9
    MAGIMG=/sbin/.core/img
;;
'16.'[1-9]*) # Version 16.1 - 16.9
    MAGIMG=/sbin/.core/img
;;
'17.'[1-3]*) # Version 17.1 - 17.3
    MAGIMG=/sbin/.core/img
;;
'17.'[4-9]*) # Version 17.4 - 17.9
    MAGIMG=/sbin/.magisk/img
;;
'18.'[0-9]*) # Version 18.x
    MAGIMG=/data/adb/modules
;;
'19.'[0-9a-zA-Z]*) # All versions 19
	MAGIMG=/data/adb/modules
;;
'20.'[0-9a-zA-Z]*) # Version 20.x
	MAGIMG=/data/adb/modules
;;
'20'[0-9a-zA-Z]*|'20.'[0-9a-zA-Z]*)
	MAGIMG=/data/adb/modules
;;
'21'[0-9a-zA-Z]*|'21.'[0-9a-zA-Z]*)
	MAGIMG=/data/adb/modules
;;
*)
    echo "Unsupported Magisk version: $MAGISK_VERSION"
	exit 1
;;
esac

# Colors
BL='\e[01;90m' > /dev/null 2>&1; # Black
R='\e[01;91m' > /dev/null 2>&1; # Red
G='\e[01;92m' > /dev/null 2>&1; # Green
Y='\e[01;93m' > /dev/null 2>&1; # Yellow
B='\e[01;94m' > /dev/null 2>&1; # Blue
P='\e[01;95m' > /dev/null 2>&1; # Purple
C='\e[01;96m' > /dev/null 2>&1; # Cyan
W='\e[01;97m' > /dev/null 2>&1; # White
LG='\e[01;37m' > /dev/null 2>&1; # Light Gray
N='\e[0m' > /dev/null 2>&1; # Null

MAGMOD=$MAGIMG/Detach
SERVICESH=$MAGMOD/service.sh
SILENT=$MAGMOD/silent

CONF=$(ls /sdcard/detach.txt || ls /sdcard/Detach.txt || ls /sdcard/DETACH.txt || ls /storage/emulated/0/detach.txt || ls /storage/emulated/0/Detach.txt || ls /storage/emulated/0/DETACH.txt) 2>/dev/null;

# root check
if ! ls /data/data 1>/dev/null 2>&1; then
    echo -e $R"(!) You must run me as root\n(type su<enter>\nDetach -<option>\nor\nsu -c Detach -<option>)\n"$N
    exit 1
fi

bb

# The selinux state need to be in 'Permissive' mode, because this script use the 'am' shell command under Android 8 and higher because of it's selinux rules.
# On Android 8 and higher if the selinux status is in 'Enforcing' mode, the selinux rules don't allow/prevent apps from killing/stopping other process through am command.
# It's why we set temporary set the selinux state in permissive mode if it's state is in enforcing mode, and restore it in it initial state at the end.
SELINUX_STATUT=$(getenforce)
if [ "$SELINUX_STATUT" = "Enforcing" ]; then
	setenforce 0
fi


case $1 in
	-id|--instant-detach) ida;;
	-l|--list-app) list;;
	-trwp|rec|--recovery) twrp_compatibility;;
	-a|--add-app) add;;
	-r|--rem-app) rem;;
	-k|--kill) k;;
	-c|--clear-PS-data) c;;
	-t|--task-scheduler) t;;
	-s|--silent-mode) s;;
	-b|--busybox) bb;;
	-h|--help) h;;
	*)	echo -e $R"\n\nNo option in your input !\nIf you need help, please type:\n su -c Detach -h\nor:\n su -c Detach --help\n(They are same)\n\n"$N
	;;
esac
}


# Instant Detach
ida() {
Detach_version=$(grep 'version=.*' "$MAGMOD/module.prop" | sed 's/version=//')
echo -e $C"\nDetach $Detach_version\n\nDetach work in progress..."$N; sleep 1;

# Check for bad syntax in the Detach.txt file due to wrong config in some BETAs versions
sed -n '5,40p' "$CONF" >> "$MAGMOD/SYN_CONF.txt"

grep -q '\.' "$MAGMOD/SYN_CONF.txt"; if [ $? -eq 0 ]; then
	echo -e $R"!- You "$CONF" file contain error(s), please use the default one to remove the errors and try again."$N
	CONF_BAD=1
fi

instant_run=$MAGMOD/instant_run.sh
instant_run_two=$MAGMOD/instant_run_two.sh
test -e "$instant_run" || touch "$instant_run"
chmod 0777 "$instant_run"
PS_DATA_PATH=/data/data/com.android.vending/databases/library.db

# Multiple Play Store accounts compatibility
ps_accounts=$("$MAGMOD/sqlite" $PS_DATA_PATH "SELECT account FROM ownership" | sort -u | wc -l)
ps_accounts_final=$((ps_accounts+1))

cat /dev/null > "$instant_run"
echo -e "PLAY_DB_DIR=/data/data/com.android.vending/databases\nSQLITE=$MAGIMG/Detach\n\n\nam force-stop com.android.vending\n\ncd \$SQLITE\n\n" >> "$instant_run"

egrep "^[[:space:]]*./sqlite" "$SERVICESH" >> "$instant_run"

echo -e "\n" >> "$instant_run"

# test -e "$MAGMOD/first_detach_result.txt" || touch "$MAGMOD/first_detach_result.txt"
# chmod 0644 "$MAGMOD/first_detach_result.txt"
sh "$instant_run" > "$MAGMOD/first_detach_result.txt" 2>&1

if [ "$ps_accounts" -gt "1" ]; then
	test -e "$instant_run_two" || touch "$instant_run_two"
	chmod 0644 "$instant_run_two"
	echo -e "PLAY_DB_DIR=/data/data/com.android.vending/databases\nSQLITE=$MAGIMG/Detach\n\n\nam force-stop com.android.vending\n\ncd \$SQLITE\n\n" > "$instant_run_two"
	am force-stop com.android.vending
	for i in {1..${ps_accounts_final}}; do grep sqlite "$instant_run" > "$instant_run_two"; done
	sed -i -e 's/.\t\/sqlite/.\/sqlite/' "$instant_run_two"
	sed -i -e 's/..\/sqlite/.\/sqlite/' "$instant_run_two"
	sed -i -e "s/SQLITE=\$MODDIR.\/sqlite//" "$instant_run_two"
	echo -e '\n' >> "$instant_run_two"
	
	sh "$instant_run_two" > "$MAGMOD/second_detach_result.txt" 2>&1
fi

	
wrong_result=$(echo "Error: UNIQUE constraint failed: ownership.account,")
if grep -q "$wrong_result" "$MAGMOD/first_detach_result.txt"; then
	[ -e "$MAGMOD/silent" ] || echo -e $C"\nDatabase file corrupted\nDatabase file need to be fixed, so please wait some little seconds...\n"$N; sleep 2;
	
	ACTAPPS=$MAGMOD/actapps.txt
	ACTAPPSBCK=$MAGMOD/actapps.bak
	FINAL=$MAGMOD/final.sh
	
	for o in "$ACTAPPS" "$ACTAPPSBCK" "$FINAL"; do touch "$o" && cat /dev/null > "$o" && chmod 0644 "$o"; done
	
	PLAY_DB_DIR=/data/data/com.android.vending/databases
	
	awk '$1 == "./sqlite" { print; x++ } END { print x, "total matches" }' "$SERVICESH" | sed '$ d' | tr -d '\t ' >> "$ACTAPPS"
	sed -i -e "s/.\/sqlite \$PLAY_DB_DIR\/library.db \"UPDATE ownership SET library_id = 'u-wl' where doc_id = '//" -i -e "s/'\";//" "$ACTAPPS"
	sed -i -e '1d' "$ACTAPPS"
	sed -i -e 's/[[:blank:]]*//' "$ACTAPPS"
		
	cp -f "$ACTAPPS" "$ACTAPPSBCK"
	var_ACTAPPS=$(awk '{ print }' "$ACTAPPSBCK")
	
	am force-stop com.android.vending
	
	FIRST_PCK_NAME=$(head -n 1 "$ACTAPPS")
	PRESENT_DIR=$(pwd)
	SQL_ENTRY_TEST=$(cd $MAGMOD && ./sqlite $PS_DATA_PATH "SELECT * FROM ownership WHERE doc_id = '${FIRST_PCK_NAME}' AND library_id='3'" | wc -l)
	cd "$PRESENT_DIR"
	ZERO=0
	
	chmod +x "$FINAL"
	
	if [ "$SQL_ENTRY_TEST" -eq 1 ]; then
		echo -e "\ncd $MAGMOD\n\n" >> "$FINAL"
		printf '%s\n' "$var_ACTAPPS" | while IFS= read -r line
			do echo -e "./sqlite $PLAY_DB_DIR/library.db \"DELETE FROM ownership WHERE doc_id = '$line' AND library_id = '3'\";\n" >> "$FINAL"
		done
		chmod +x "$FINAL"
		sh "$FINAL"
	else
		echo -e "\ncd $MAGMOD\n\n" >> "$FINAL"
		while [ "$ZERO" -le "$SQL_ENTRY_TEST" ]; do
			printf '%s\n' "$var_ACTAPPS" | while IFS= read -r line
				do echo -e "./sqlite $PLAY_DB_DIR/library.db \"DELETE FROM ownership WHERE doc_id = '$line' AND library_id = '3'\";\n" >> "$FINAL"
			done
			SQL_ENTRY_TEST=$(($SQL_ENTRY_TEST - 1))
		done
		sh "$FINAL"
	fi
	
	for f in "$ACTAPPS" "$ACTAPPSBCK" "$MAGMOD/first_detach_result.txt"; do rm -f "$f"; done
	echo -e $C"\nDatabase file fixed.\n\nDone\n"$N; sleep 1;
else		
	echo -e $G"\nDone\n"$N
fi

am force-stop com.android.vending

# for r in "$instant_run_two" "$ACTAPPS" "$ACTAPPSBCK" "$FINAL" "$MAGMOD/first_detach_result.txt"; do rm -f "$r"; done
rm -f "$MAGMOD/SYN_CONF.txt"

# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# List hided apps
list() {
apps_list_basic=$(tail -n +32 "$SERVICESH" | grep -e "# [A-Z]" | sed 's/# Custom Packages//' | sed 's/# Multiple.*//' | sed '$ d' | sed 's/[[:blank:]]*//' | grep "# [A-Za-z0-9]" | sed 's/# //')
apps_list_cust=$(sed -n '/# Custom Packages/,$p' $SERVICESH | egrep "^[[:space:]]*./sqlite" | sed "s/.\/sqlite \$PLAY_DB_DIR\/library.db \"UPDATE ownership SET library_id = 'u-wl' where doc_id = '//" | sed "s/'\";//" | sed 's/[[:space:]]//')

echo "$apps_list_basic" >> "$MAGMOD/apps_lists.txt"
echo "$apps_list_cust" >> "$MAGMOD/apps_lists.txt"


FINAL_apps_list=$(awk '{ print }' "$MAGMOD/apps_lists.txt")

echo -e "\n\nHidden app(s):\n$divider\n"
printf '%s\n' "$FINAL_apps_list" | while IFS= read -r line
	do echo "- $line"
done
echo -e "\n$divider\n"
sleep 1;

rm -f "$MAGMOD/apps_lists.txt"
}



# Adding app
add() {
SERVICESH=$MAGMOD/service.sh
CONF=$(ls /sdcard/Detach.txt || ls /storage/emulated/0/Detach.txt || ls /sdcard/detach.txt || ls /sdcard/DETACH.txt || ls /storage/emulated/0/detach.txt || ls /storage/emulated/0/DETACH.txt) 2>/dev/null;
ACT_BASIC_APPS=$MAGMOD/act_basic_apps.txt
ACT_CUST_APPS=$MAGMOD/act_cust_apps.txt
COMPATIBILITY=$MAGMOD/compatibility.txt
Instant_sqlite=$MAGMOD/instant_sqlite.txt
DL_CHECK=$MAGMOD/DL_check.txt

for i in "$ACT_BASIC_APPS" "$ACT_CUST_APPS" "$Instant_sqlite"; do  [ ! -e "$i" ] && touch "$i" && chmod -R 0644 "$i"; done

echo -e $C"\n\nPlease write the application package name\nyou want to detach from automatic PS update\n\nPackage name: "$N
read TOADD

echo -e $C"\n\n '$TOADD' - Do you confirm ?"$N; sleep 2;
read CONFIRMADD
if [ $(cat "$SERVICESH" | grep "$TOADD" | sed 's/  #//') ]; then
	echo -e $R"\n! The name that you have entered already exist in your list\n=> Type su -c Detach -a or su and Detach -a again to add another package name in your list.\n\n"$N; sleep 3;
	exit
fi

if [ $(echo "$TOADD" | wc -l) -gt 1 ]; then
	echo -e $R"\n! Please enter only one package name at a time."$N; sleep 3;
	exit
fi

case $CONFIRMADD in
	Y|y|Yes|yes|YES)
	echo -e $G"\nCheck if $TOADD exist on the Play Store..."$N; sleep 2;
	# Check if user input exist on Play Store \(WIFI and/or LTE are require\)
	touch "$DL_CHECK" && chmod 0777 "$DL_CHECK"
	wget --no-check-certificate -T 5 -q -O "$MAGMOD/$TOADD.html" "https://play.google.com/store/apps/details?id=$TOADD&hl=en"
	# Check for empty HTML page = 404 = Not Found = Custom apps don't exist on the Play Store
	if [[ $(cat "$DL_CHECK" | grep '404' | awk '{ print $1 }' 2>/dev/null) -eq "404" ]] 2>/dev/null; then
		echo 'a2'
		echo -e "\nWarning: The package name of the application you just\nentered does not exist in the Play Store.\n"
		rm -f "$ACT_BASIC_APPS"
		rm -f "$ACT_CUST_APPS"
		rm -f "$instant_run"
		rm -f "$Instant_sqlite"
		exit
	fi
	
	
	# Check if the app exist on the Play Store and if yes, get official app Name
	wget --no-check-certificate -q -O "${MAGMOD}/$TOADD.html" "https://play.google.com/store/apps/details?id=${TOADD}&hl=en" --header "header: play.google.com" 2>&1 >> "$MAGMOD/$TOADD_DL_check.txt"
	cat "$MAGMOD/$TOADD_DL_check.txt" | grep '404' | awk '{ print $1 }' > "$MAGMOD/$TOADD_DL_final_check.txt"
	
	if [ -s "$MAGMOD/$TOADD_DL_final_check.txt" ]; then
		echo -e $R"\nApparently $TOADD don't exist on the Play Store or you don't have write the name correctly..."$N; sleep 2;
		exit
	else
		grep 'AHFaub' "$MAGMOD/$TOADD.html" | tail -1 | cut -f1,2,3 -d'<' | sed 's/.*>//' | sed 's/(Trial)//' | sed 's/(Trial version)//' | sed 's/-.*//' | sed 's/:.*//' | sed 's/★.*//' | sed 's/ &amp.*//' | sed 's/\|.*//' | tr -d '\n' >> "$MAGMOD/$TOADD.txt"
	fi
	
	
	# May to be a basic app... or custom packages
	if grep -qs 'Gmail\|Google\|Google+ for G Suite\|Hangouts\|YouTube\|Gboard\|Contacts\|Phone\|Google Photos\|Clock\|Google Camera\|Google Duo\|Dropbox\|Pushbullet\|Google Calendar\|Google Keep\|Telegram\|SwiftKey Keyboard\|Google Translate\|Facebook\|Pandora\|Twitter\|Slack\|MEGA\|WhatsApp Messenger\|Google Voice\|Google Drive\|Netflix\|Pixel Launcher\|Wallpapers\|GoPro\|Google VR Services\|Google Play services\|Carrier Services' "$MAGMOD/$TOADD.txt"; then
		CHECK_RESULT_BASICS=1
	fi
	
	WEB_NAME=$(cat "$MAGMOD/$TOADD.txt")
		
	if [ "$CHECK_RESULT_BASICS" == 1 ]; then
		# For basic
		# Get line number of app to hide from basic list
		BASIC_NUMBER=$(grep -no "$TOADD" "$CONF" | sed 's/:.*//')
		echo -e "\n- Enable $TOADD in your Detach.txt file as Common app\n"; sleep 2;
		sed -i -e "${BASIC_NUMBER}s/# ${TOADD}/${TOADD}/" "$CONF"
		
		# Grep each sqlite commands with apps titles (common apps)
		sqlite_cmds_common=$(grep -no '# Custom Packages' "$SERVICESH" | sed 's/:.*//')
		sqlite_cmds_final=$((sqlite_cmds_common-1))
		sqlite_cmds_cust=$(grep -n '# Multiple' "$SERVICESH" | sed 's/:.*//')
		sqlite_cmds_final2=$((sqlite_cmds_cust-1))
		sed "32,$sqlite_cmds_final!d;" "$SERVICESH" | grep '[a-zA-Z0-9]' >> "$ACT_BASIC_APPS"
		sed "$sqlite_cmds_common,$sqlite_cmds_final2!d;" "$SERVICESH" | grep '[a-zA-Z0-9]' >> "$ACT_CUST_APPS"
		echo -e "\n	# $BASIC_NAME_LOCAL\n	./sqlite \$PLAY_DB_DIR/library.db \"UPDATE ownership SET library_id = 'u-wl' where doc_id = '$i'\";\n\n$TOADD\n" >> "$ACT_BASIC_APPS"
		
		sed -i -e '32,$d' "$SERVICESH"
		cat "$ACT_BASIC_APPS" >> "$SERVICESH"
		echo -e "\n\n" >> "$SERVICESH"
		cat "$ACT_CUST_APPS" >> "$SERVICESH"
		# Export sqlite cmds before writing all other contents in file (for Instant Run step)
		su -c grep sqlite "$SERVICESH" | sed -i -e '1d' >> "$Instant_sqlite"
		cat "$COMPATIBILITY" >> "$SERVICESH"
		echo -e "\n\n# Exit\n	exit; fi\ndone &)\n" >> "$SERVICESH"
	else
		# For custom
		# Grep each sqlite commands with apps titles (common apps)
		sqlite_cmds_common=$(grep -no '# Custom Packages' "$SERVICESH" | sed 's/:.*//')
		sqlite_cmds_final=$((sqlite_cmds_common-1))
		sqlite_cmds_cust=$(grep -n '# Multiple' "$SERVICESH" | sed 's/:.*//')
		sqlite_cmds_final2=$((sqlite_cmds_cust-1))
		
		sed "32,$sqlite_cmds_final!d;" "$SERVICESH" | grep '[a-zA-Z0-9]' >> "$ACT_BASIC_APPS"
		sed "$sqlite_cmds_final,$sqlite_cmds_final2!d;" "$SERVICESH" | grep '[a-zA-Z0-9]' >> "$ACT_CUST_APPS"
		echo "" >> "$ACT_CUST_APPS"
		echo -e "\n	# $WEB_NAME\n	./sqlite \$PLAY_DB_DIR/library.db \"UPDATE ownership SET library_id = 'u-wl' where doc_id = '$TOADD'\";\n\n" >> "$ACT_CUST_APPS"
		echo "" >> "$ACT_CUST_APPS"
		sed -i -e '32,$d' "$SERVICESH"
		cat "$ACT_BASIC_APPS" >> "$SERVICESH"
		echo -e "\n\n" >> "$SERVICESH"
		cat "$ACT_CUST_APPS" >> "$SERVICESH"
		cat "$COMPATIBILITY" >> "$SERVICESH"
		echo -e "\n\n# Exit\n	exit; fi\ndone &)\n" >> "$SERVICESH"
		echo -e $G"\n- Enable $WEB_NAME in your $CONF file.\n"$N
		echo -e "$TOADD" >> "$CONF"
	fi
		
	# Instant Run
	instant_run=$MAGMOD/instant_run.sh
	instant_run_two=$MAGMOD/instant_run_two.sh
	
	test -e "$instant_run" || touch "$instant_run"
	chmod 0777 "$instant_run" && chmod +x "$instant_run"
	
	PS_DATA_PATH=/data/data/com.android.vending/databases/library.db
	
	# Multiple Play Store accounts compatibility
	ps_accounts=$("$MAGMOD/sqlite" $PS_DATA_PATH "SELECT account FROM ownership" | sort -u | wc -l)
	ps_accounts_final=$((ps_accounts+1))
	
	cat /dev/null > "$instant_run"
	echo -e "PLAY_DB_DIR=/data/data/com.android.vending/databases\nSQLITE=${MAGMOD}\n\n\nam force-stop com.android.vending\n\ncd \$SQLITE\n\n" >> "$instant_run"
	
	egrep "^[[:space:]]*./sqlite" "$SERVICESH" >> "$instant_run"

	echo "" >> "$instant_run"

	test -e "$MAGMOD/first_detach_result.txt" || touch "$MAGMOD/first_detach_result.txt"
	chmod 0644 "$MAGMOD/first_detach_result.txt"
	sh "$instant_run" > "$MAGMOD/first_detach_result.txt" 2>&1

	if [ "$ps_accounts" -gt "1" ]; then
		test -e "$instant_run_two" || touch "$instant_run_two"
		chmod 0644 "$instant_run_two"
		echo -e "PLAY_DB_DIR=/data/data/com.android.vending/databases\nSQLITE=${MAGMOD}\n\n\nam force-stop com.android.vending\n\ncd \$SQLITE\n\n" > "$instant_run_two"
		am force-stop com.android.vending
		for i in {1..${ps_accounts_final}}; do grep sqlite "$instant_run" > "$instant_run_two"; done
		sed -i -e 's/.\t\/sqlite/.\/sqlite/' "$instant_run_two"
		sed -i -e 's/..\/sqlite/.\/sqlite/' "$instant_run_two"
		sed -i -e "s/SQLITE=\$MODDIR.\/sqlite//" "$instant_run_two"
		echo -e '\n' >> "$instant_run_two"
	
		sh "$instant_run_two" > "$MAGMOD/second_detach_result.txt" 2>&1
	fi

	wrong_result=$(echo "Error: UNIQUE constraint failed: ownership.account,")
			
	if grep "$wrong_result" "$MAGMOD/first_detach_result.txt"; then
		[ -e "$MAGMOD/silent" ] || echo -e $C"\nDatabase file corrupted\nDatabase file need to be fixed, so please wait some little seconds...\n"$N; sleep 2;
		ACTAPPS=$MAGMOD/actapps.txt
		ACTAPPSBCK=$MAGMOD/actapps.bak
		FINAL=$MAGMOD/final.sh
		for o in "$ACTAPPS" "$ACTAPPSBCK" "$FINAL"; do touch "$o" && cat /dev/null > "$o" && chmod 0644 "$o"; done
		grep sqlite "$instant_exit_final" > "$ACTAPPS"
		sed -i -e "s/.\/sqlite \$PLAY_DB_DIR\/library.db \"UPDATE ownership SET library_id = 'u-wl' where doc_id = '//" -i -e "s/'\";//" "$ACTAPPS"
		sed -i -e '1d' "$ACTAPPS"
		sed -i -e 's/[[:blank:]]*//' "$ACTAPPS"
		PLAY_DB_DIR=/data/data/com.android.vending/databases
		cp -f "$ACTAPPS" "$ACTAPPSBCK"
		echo -e "PLAY_DB_DIR=/data/data/com.android.vending/databases\nSQLITE=${MAGMOD}\n\n\nam force-stop com.android.vending\n\ncd \$SQLITE\n\n" >> "$FINAL"
		
		var_ACTAPPS=$(awk '{ print }' "$ACTAPPSBCK")
		for i in $(echo "$var_ACTAPPS"); do echo -e "$MAGMOD/sqlite $PLAY_DB_DIR/library.db \"DELETE FROM ownership WHERE doc_id = '$i' AND library_id = '3'\";" >> "$FINAL"; done
		sh "$FINAL"
		am force-stop com.android.vending
					
		echo -e $G"\nDetaching task done\n"$N
	else		
		echo -e $G"\nDone\n"$N
	fi
	
	for f in "$instant_run" "$ACTAPPS" "$ACTAPPSBCK" "$MAGMOD/second_detach_result.txt" "$instant_run_two"; do rm -f "$f"; done
;;
	N|n|No|no|NO) echo $R"\nCanceled\n"$N
	exit 0
				
;;
	*) echo $R"\n\nINVALID ENTRY, try again.\n"$N
;;
esac

	
rm -f "$ACT_BASIC_APPS"
rm -f "$ACT_CUST_APPS"
# rm -f "$instant_run"
rm -f "$Instant_sqlite"
rm -f "$MAGMOD/first_detach_result.txt"
rm -f $MAGMOD/*.html
rm -f "$MAGMOD/DL_check.txt"
rm -f "$MAGMOD/$TOADD.txt"

	# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# Removing app
rem() {
SERVICESH=$MAGMOD/service.sh
ACTAPPS=$MAGMOD/actapps.txt
ACTAPPSRD=$MAGMOD/actapps_ready.txt
SERVICESHFN=$MAGMOD/final_service.sh
[ -e "$ACTAPPSRD" ] | rm -f "$ACTAPPSRD"
touch "$ACTAPPSRD"
chmod 0644 "$ACTAPPSRD"
[ -e "$ACTAPPS" ] | rm -f "$ACTAPPS"
touch "$ACTAPPS"
chmod 0644 "$ACTAPPS"


egrep "^[[:space:]]*./sqlite" "$SERVICESH" >> "$ACTAPPS"
sed -i -e "s/.\/sqlite \$PLAY_DB_DIR\/library.db \"UPDATE ownership SET library_id = 'u-wl' where doc_id = '//" -i -e "s/'\";//" "$ACTAPPS"
sed -i -e 's/[ \t]*//' "$ACTAPPS"


printf '%s\n' "$ACTAPPS" | while IFS= read -r line
	do echo -e "\n\nHided app(s):\n$divider\n"
	cat "$line"
	echo -e "\n$divider\n"
done

echo -e $B"\nWich app do you want to remove ?\n(Type a part or the name or the complete name)"$N
read TODEL
	
echo -e $G"\n\nSearch for the name...\n"$N; sleep 2;
	
APPLINE2REM=$(grep "$TODEL" "$ACTAPPS")
APPLINENUM=$(grep -n "$APPLINE2REM" "$SERVICESH" | sed "s/:.*//")
	
if [ ! "$APPLINE2REM" ]; then
	echo -e $R"\n\n ! No matchs found, please refine your pattern.\n\n"$N; sleep 3; exit ;
fi
if [ $(echo "$APPLINE2REM" | wc -l) -gt "1" ]; then
	echo -e $R"\n\n ! Too much matchs found, please refine your pattern.\n\n"$N; sleep 3; exit ;
fi

APPTOREMPREVIOUS=$((APPLINENUM-1))
echo $B"\n\n'$APPLINE2REM' is ready to be deleted.\n\n"$N; sleep 2;

echo -e $B"\n=> Do you confirm ?\n(yes or no)\n"$N
read CONFTODEL
	
case $CONFTODEL in
	Y|y|Yes|yes|YES|ye|Ye)
			sed -i -e "${APPLINENUM}d" "$SERVICESH"
			sed -i -e "${APPTOREMPREVIOUS}d" "$SERVICESH"
			echo -e $G"\n$APPLINE2REM has been deleted\n"$N; sleep 1;
	;;
	N|n|No|no|NO|Na|na) 
			echo $R"\nCanceled\n"$N
			exit 0
	;;
	*) echo $R"\n\nINVALID ENTRY, try again.\n"$N
	;;
esac

	
for k in "$ACTAPPS" "$ACTAPPSRD"; do rm -f "$k"; done

echo -e $B"\nExit...\n"$N; sleep 1;

# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac

	exit
}


# Kill PS app
k() {
	[ -e "$MAGMOD/silent" ] || echo -e $B"\nForce closing the Play Store app...\n"$N
	sleep 2
	am force-stop com.android.vending
	[ -e "$MAGMOD/silent" ] || echo -e $G"\nPS app has been force-stop.\n"$N
	
	# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# Clear PS datas
c() {
	[ -e "$MAGMOD/silent" ] || echo -e $B"\nWorks in progress...\n"$N; sleep 2;
	pm clear com.android.vending
	[ -e "$MAGMOD/silent" ] || echo -e $G"\nDone\n"$N
	
	# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# Task scheduler
t() {
cat <<SCHEDULE
	
	
	
			=== Detach scheduling ===
			       ~ By Rom ~
	
=> Here, many way to scheduling the detach works are possible.
=> Just choose one of them with the corresponding number.
	
	1 - Tasker (Market application)
	2 - Crond (Linux command)
	3 - DJS (Magisk module made by VR25@xda-devlopers.com)
	4 - Droid Automation (Market application)
	5 - Termux (Termux:Boot script mode)
	
	0 - Your own app/tool/MOD
	
	99 - Exit
	
	
	
Now just make your choice..
(1, 2, 3, 4,...)
SCHEDULE

read SCHEDU

case $SCHEDU in
	1|Tasker|tasker|TASKER)
		echo -e $P"\n\nYour choice: Tasker\n"$N
		if [ $(pm list packages net.dinglisch.android.taskerm | sed "s/package://") == "net.dinglisch.android.taskerm" ]; then
			echo -e $C"\nNext step require Busybox Magisk Module and active connexion (WIFI/Datas).\n"$N; sleep 2;
			bb
			wget --no-check-certificate -T 5 -q -O "$MAGMOD/Auto_Detach_Tasker.prf.xml" https://github.com/xerta555/Detach-Files/raw/master/Auto_Detach_Tasker.prf.xml 2>/dev/null
			
			if [ ! -e "$MAGMOD/Auto_Detach_Tasker.prf.xml" ]; then
				echo -e $R"Unable to download the necessary file!\nPlease check your connexion."$N
				exit
			fi
			
			echo -e $C"\nEvery how many hours do you want to run the Detach script to be executed?\nJust type the number you want.\n\nFor info: 1 to 99 hours is supported by default.\n\n"$N
			read TASKER_period
			
			TASKER_period_final=$(grep -Eo [0-9]+ <<<$TASKER_period)
			echo -e $C"\nYou have chosen: every $TASKER_period_final hours\n"$N; sleep 2;
			sed -i -e "13s/hour/$TASKER_period_final/" "$MAGMOD/Auto_Detach_Tasker.prf.xml"
			cp -f $MAGMOD/Auto_Detach_Tasker.prf.xml /sdcard
			echo -e $G"\nTasker profile file for your Tasker app is ready:\n\n/sdcard/Auto_Detach_Tasker.prf.xml\n\n=> Just import this file in your Tasker:\n- Longpress on 'PROFILES' tab.\n'- Import Profile'\n- Choose your storage icon on bottom right corner\n- Browse to your file\n- Confirm the import in Tasker app\n- Enjoy\n\n"$N
		else
			echo $R"\n! => Apparently you don't have install Tasker application\n! => Do you want to install it?"$N; sleep 2;
			read TASKER_INSTALL
			case $TASKER_INSTALL in
				Y|y|Yes|yes|YES)
					am start -a android.intent.action.VIEW -d 'https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&hl=en'
				;;
				N|n|No|no|NO)
					exit 0
				;;
			esac 
		fi
	;;
	
	2|cron|crond|CRON|COND|Cron|Crond)
		echo -e $P"\n\nYour choice: Crond\n"$N
		if [ -e /system/bin/crond ] || [ -e /system/sbin/crond ] || [ -e /system/xbin/crond ] || [ -e /sbin/crond ]; then
			echo -e $B"\nPlease enter your full crond command below.\nFormats for times: Minute (0-59) SPACE Hour (0-23) SPACE Day of mount (1-31) SPACE Month (1-12) SPACE Day of Week (0-6) (For Sunday=0 or 7)\nCommand exemple for every 2 hours:\ncrond 0 */2 * * * su -c detach -id\n\n"$N
			read crond_entry
			$crond_entry
		fi
	;;
	
	3|DJS|Djs|djs)
		echo -e $P"\n\nYour choice: DJS Module\n"$N
		busybox_magisk=$(ls "$BBPATH/system/bin/busybox" || ls "$BBPATH/system/xbin/busybox" || ls /system/xbin/busybox || ls /system/bin/busybox || ls /system/sbin/busybox || ls /sbin/busybox || ls /system/bin/watch || ls /system/xbin/watch || ls /system/sbin/watch || ls /sbin/watch) 2>/dev/null
		
		if [ -e "$MAGIMG/djs/module.prop" ] && [ ! -e "$MAGIMG/djs/update" ] && test $busybox_magisk; then
			echo -e $B"\nEvery how many hours do you want to run the Detach Magic with djs module?\n(Type a number)\n"$N
			read djs_hours
			djs_hours_1=$(echo "$djs_hours" | grep '[1-9]')
			if [ "$djs_hours_1" ]; then
				djs_hours__pre_final=$((djs_hours_1 * 60))
				djs_hours__final=$((djs_hours__pre_final * 60))
			fi
			djs-config --append boot "watch -tn ${djs_hours__final} detach -id > /dev/null 2>&1"
			
			echo -e $G"\nPlease note that you can turn off DJS by doing enter 'djsd.|djsd-stop' command in your terminal.\n\nDone\n"$N
		else
			echo -e $Y"You have to:\n - Install djs module with Magisk Manager\n - Reboot your device\n - And run again su -c detach -t in your terminal emulator"$N
		fi
	;;
	
	4|"Droid Automation"|"DROID AUTO"|"DROID AUTOMATION"|"droid automation"|Droid|DROID|droid)
		echo -e $P"\n\nYour choice: Droid Automation\n\n- Check your app setup...\n"$N
		
		if [ -z $(pm list packages com.wakdev.droidautomation.free) ]; then
			echo $R"\n! => Apparently you don't have install Droid Automation\n! => Do you want to install it?"$N; sleep 2;
			read TASKER_INSTALL
			case $TASKER_INSTALL in
				Y|y|Yes|yes|YES)
					am start -a android.intent.action.VIEW -d 'https://play.google.com/store/apps/details?id=com.wakdev.droidautomation.free&hl=en'
				;;
				N|n|No|no|NO)
					exit 0
			esac
		fi
		
		echo -e $B"\nEvery how many hours minutes seconds do you want to run the Detach Magic?\n(Separate hours minutes and seconds with spaces)\n\n"$N
		read DA
		DA3=$(echo "$DA" | awk '{print $1}')
		DA2=$(echo "$DA" | awk '{print $2}')
		DA1=$(echo "$DA" | awk '{print $3}')
		
		# Juste in case of (backup/restore).
		NOW_YEAR=$(date +"%Y")
		NOW_MONTH=$(date +"%m")
		NOW_DAY=$(date +"%d")
		
		NOW_HOURS=$(date +"%H")
		NOW_MINUTES=$(date +"%M")
		NOW_SECONDS=$(date +"%S")
		# Juste in case of (backup/restore).
		
		
		test -d /data/data/com.wakdev.droidautomation.free/files/profiles/automation/ || mkdir -p /data/data/com.wakdev.droidautomation.free/files/profiles/automation/
		
		test -e /sdcard/Droid_Automation_Detach.json | rm -f /sdcard/Droid_Automation_Detach.json
		
		echo "{\"automation.profile.name\":\"Droid Automation Detach\",\"automation.profile.enabled\":true,\"automation.profile.triggers.length\":1,\"automation.profile.triggers.data\":[{\"triggers.fields\":{\"field3\":\"${DA3}\",\"field1\":\"${DA1}\",\"field2\":\"${DA2}\"},\"triggers.config\":{\"itemUpdate\":\"true\",\"itemTriggerExtra\":null,\"requestType\":\"38\",\"itemTrigger\":\"18367\",\"itemHash\":\"833cf518-c11b-411c-a412-98900f11705a\",\"itemDescription\":\"Déclencher toutes les : 05h.06m.07s.\"}}],\"automation.profile.tasks.length\":1,\"automation.profile.tasks.data\":[{\"task.fields\":{\"field1\":\"su -c detach -id\"},\"task.config\":{\"itemUpdate\":\"false\",\"requestType\":\"6666\",\"itemTask\":\"su -c detach -id\",\"itemDescription\":\"su -c detach -id\",\"itemHash\":\"be7b37d9-1573-45f5-b20c-42df0a90be6a\"}}]}" >> /sdcard/Droid_Automation_Detach.json
		
		echo -e $G"\nFile successfully generated at:\n/sdcard/Droid_Automation_Detach.json\n\n=> Now you just have to import this file in your Droid Automation app.\n\nINFO: It would be a good idea to run the profile in the Options tab of the profile, in order to grant Droid 'su' access rights so that you don't have to do this later.\n"$N
	;;
	5|Termux|termux|Termux:Boot|termux:boot|termuxboot|TERMUXBOOT|TermuxBoot|Termuxboot)
		echo -e $P"\n\nYour choice: Termux:Boot\n\n- Check your app setup...\n"$N
		
		if [ -z $(pm list packages com.termux.boot) ]; then
			echo $R"\n! => Apparently you don't have install Droid Automation\n! => Do you want to install it?"$N; sleep 2;
			read TASKER_INSTALL
			case $TASKER_INSTALL in
				Y|y|Yes|yes|YES)
					am start -a android.intent.action.VIEW -d 'https://play.google.com/store/apps/details?id=com.termux.boot&hl=en'
				;;
				N|n|No|no|NO)
					exit 0
				;;
			esac
		fi
		termux_dir=/data/data/com.termux/files/home/.termux/boot
		termux_file=Detach_for_Termux.sh
		echo -e "\n\nWe are going to open Termux:Boot app, once you will have open it, you will have to come back here in your terminal app (here), writing 'OK', and confirm by press ENTER key.\n\n"
			
		echo -e "Shall we go?\n(Yes)\n"
					
		read termux_confirm
		case $termux_confirm in
			Yes|yes|YES) am start -n com.termux.boot/com.termux.boot.BootActivity
			;;
			*) echo -e $R"\nInvalid input\n"$N
			;;
		esac
		
		mkdir -p "$termux_dir"
		echo -e "termux-wake-lock\nsu -c detach -id\n" >> "$termux_dir/$termux_file"
		chmod 0644 "$termux_dir/$termux_file" && chmod +x "$termux_dir/$termux_file"
		echo -e "\nDone !\n\n-Make sure DJS module is enabled in your Magisk Manager\nReboot your device\n- Profit!\n\n"			
	;;
	0|"My tool"|Mine)
		if [ ! -e "$MAGMOD/instant_run.sh" ]; then
			echo -e $P"\nWarning: Before scheduling, you must have run the command at least once time:\nsu -c detach -id\n\nThen you can use the schedule feature of your choice freely.\n\nRemember that to update the list of your detached applications, you must flash the module again via TWRP or Magisk Manager (prefer Magisk Manager preferably, but TWRP remains compatible with the module in the absolute).\n\n"; sleep 2;$N
		else
			echo -e $G"\nCommand (best method - require root access):\n su -c Detach -id\n\n"$N; sleep 1;
			echo -e $Y"\n\nPath of the script file: $MAGMOD/instant_run.sh\n"; sleep 2;$N
		fi
	;;
	99|Quit|quit|QUIT|EXIT|Exit|e)
		exit
	;;
esac
		
	# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# Silent mode
s() {
	if [ -e "$SILENT" ]; then
		echo -e $G"\nSilent mode actualy: Enabled"$N; sleep 2;
	else
		echo -e $G"\nSilent mode actualy: Disabled"$N; sleep 2;
	fi
		
	if [ ! -e "$SILENT" ]; then
		touch "$SILENT"
		chmod 0644 "$SILENT"
		echo -e $G"..\nNew mode: Enabled\n"$N; sleep 2;
	else
		rm -f "$SILENT"
		echo -e $G"..\nNew mode: Disabled\n"$N; sleep 2;
	fi
	
	# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# Help
h() {
	cat <<HELP
  
  
  
$divider
Welcome to the Detach Magisk module
$divider
$divider
MOD ported by Rom@xda-developers from MOD by
hinxnz@xda-developers to works on Magisk v17+.
$divider


Usage: Detach [options]

Options:
$divider
-id (or --instant-detach)          instantly detach apps
-l (or --list-app)                 list actual detached apps
-a (or --add-app)                  hide new application
-r (or --rem-app)                  un-hide application 
-k (or --fill)                     force-stop Play Store run
-c (or --clear-PS-data)            clear Play Store datas
-t (or --toogle-silent-mode)       toggle silent mode

HELP

if [ -e "$MAGMOD/silent" ]; then
	exit
else	
	echo -e "\nNeed more infos?\n(Yes or No)\n\n"

	read HELP_MORE

	case $HELP_MORE in
		Y|y|Yes|yes|YES)

	cat <<HELP_PLUS


-id or --instant-detach
=> Instantly remove desired applications from the Play Store.
NB: This feature let a file ready to be executed by any app like
Tasker, this file have for path:
$instant_run



-a or --add-app
=> Instantly adding new application(s) in the detaching function,
the new app name need to be writed directly in your terminal app with your keyboard.
To confirm it, you just have to press the ENTER key. After that you will be prompted to 
confirm your action by a yes or a no.



-r or --rem-app
=> Use this function if you want to remove application from the detach feature.
By using this feature, you will have to provide a pattern (a part or the full name) of the app name.
You will be asked to confirm the action with a yes or a name as if you were adding an application.



-k|--kill
=> Kill (force stopping) the Play Store app, this command can be 
usefull to take changes made by this MOD.



-c|--clear-PS-data
=> Please be carrefull with this function because it purely cleanup
the data of your Play Store app (PS is an abbreviation of Play Store). So by using it,
it will not prompt you to confirm this action. After that PS data will be cleared,
your recent app(s) updates will be deleted and the databases files of your PS
will need to be generated again, and it can take at maximum 1 or 2 hours.
So use it with caution !



-t|--toogle-silent-mode
=> This MOD now include a silent mode, it can be used to prevent
additionnal and texts infos to be displayed followed the function(s) you use.
It can be usefull for users who want to automate the detaching process with a tool/app.
(Like Tasker for exemple)



-h|--help
=> Provide all neccesarry infos for all arguments of this MOD.

$separator
	
$divider



Links:

Original xda thread: https://forum.xda-developers.com/android/software-hacking/mod-detach-market-links-theme-ready-apps-t3447494
Original creator: hinxnz at: https://forum.xda-developers.com/member.php?u=1909299
MOD ported by Rom: https://forum.xda-developers.com/member.php?u=5332893
Telegram channel: https://t.me/Detach_gms_apps
Git repo: https://github.com/xerta555/Detach
Module-Repo link for Magisk: https://github.com/Magisk-Modules-Repo/Detach
	
	
HELP_PLUS
;;
		N|n|No|no|NO) exit
;;
	esac
fi

# Selinux statut restoring
case "$SELINUX_STATUT" in
	Enforcing) setenforce 1
	;;
	Permissive) setenforce 0
	;;
esac
}


# Busybox installer
bb() {

BBPATH=$MAGIMG/busybox-ndk
busybox_magisk=$(ls "$BBPATH/system/bin/busybox" || ls "$BBPATH/system/xbin/busybox" || ls /system/xbin/busybox || ls /system/bin/busybox || ls /system/sbin/busybox || ls /sbin/busybox) 2>/dev/null

bb_ok() {
echo -e $C"Compatibility check... ✓\n"$N; sleep 0.1;
}

bb_nok() {
echo -e $C"Compatibility check... ×\n"$N; sleep 0.1;
}

if [ -z "$busybox_magisk" ]; then
	bb_nok
else
	bb_ok
fi
}

divider="---------------"
separator="-------------"

clear

menu $@
